#define	pow	4

; VAR является фиктивной командой. Ее можн осчитать директивой ассемблера. То есть ассемблер просто заменяет имя переменной ее фактическим адресом
; По этой причине, объявляет VAR можно в любом месте программ, главное до первого упоминания переменной
; Однако хорошим стилем выносить объявление этих переменных в начало файла.
; Это связано с тем, что переменные VAR видны во всей области видимости, память выделяется при старте программы и освобождается при завершении программы

VAR		a ; объявленные переменные заносятся в таблицу соответсвия "имя - адрес"
VAR		b ; память для них выделяется статически (до выполнения программы)
VAR		c ; это избавляет программиста от необходимости работать с ОП напрямую

; программа возводит a в степень b и помещает результат в с. 
; нулевой и первый регистры процессора используются в качестве счётчика цикла

start: ;точка входа в программу
		SET		a	3
		SET 	b	pow
		SET		c	1

		SET		(0	0 ; круглая скобочка - разыменовывание номера регистра. То есть первый операнд есть 0-й регистр процессора
					  ; квадратная скобочка аналогично значит, что в далее последует номер ячейки в ОП
					  
loop:	SET		(1	b ; Седьмая строка кода.

		SUB		(1	(0

		JUMP	(1	10	end ; условный переход. первый операнд содержит условие перехода, второй - номер инструкции в виде константы, третий - номер инструкции в виде метки
							; end - зарезервированная метка, указывает на конец программы (вводится самим ассемблером)
nxt:	MUL		c	a
		INC		(0

		JUMP	loop ; безусловный переход к седьмой строке