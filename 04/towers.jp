; буду два списка - список солдатов игрока и список солдатов компьютера
; элемент списка имеет следующую структуру: {x, hp, pw, spr, next}. последний в списке имеет в поле next значение константы elist
; в элементе spr хранится указатель на процедуру отрисовки персонажа (то есть, значение метки)
#define elist 65535 ; определяет конец списка (по сути - максимальное значение uint)

#define MX_HP 100

#define killzone 50 ; константа определяет размер зоны в которой бонус убивает врагов.
#define killcost 10 ; стоимость

#define u1cost 2 ; стоимость одного мечника

VAR pll 2 ; тут будут хранится указатель на первый и последний элементы списка солдатов игрока
VAR enl 2 ; тут будут хранится указатель на первый и последний элементы списка солдатов бота

VAR enhp ; здоровье башни врага
VAR plhp ; здоровье башни игрока

VAR plnxx ; тут будет указатель на X координату следующего солдата (что бы шагать только если не уперся в спину)
VAR ennxx ; тут будет указатель на X координату следующего солдата врага (что бы шагать только если не уперся в спину)

VAR prw ; тут хранится время прошлого обновления экрана в миллисекундах
VAR prwa ; тут хранится время прошлого обновления урона (урон будет обрабатыватся реже, чем будет производится перерисовка экрана)
VAR prwe ; тут хранится время прошлого появлния солдата у врага. При истечении времени у врага появляется новый солдат

VAR plscore 2 ; счёт игрока и максимальный возможный счёт. Можно тратить на покупку солдат, бонусы и улучшения

VAR escore ; тут хранится значение, определяющее счет врага
VAR epwr ; тут хранится значение, определяющее мощность вражеских солдат

waitfor: ; простенькая процедура ожидает заданного количества милисекунд. Количество миллисекунд передается через стек
	PEEK (1 1
	CLCK (2
wflop:
	CLCK (3
	SUB (3 (2
	SUB (3 (1
	NEG (3
	JUMP (3 wflop
	RET 1

kilanim: ; тут обработка бонуса, убивающего врагов около замка 
	SET (4 200
	SET (5 200
	SET (6 255
	SET (7 127
	GDO 1
	
	SET (4 7
	GDO 2
	
	PUSH 0
	PUSH 0
	PUSH killzone
	PUSH 64
	CALL rect
	GDO 3
	GDO 5
	
	PUSH 100
	CALL waitfor
	
	CALL ondraw	
	PUSH 100	
	CALL waitfor
	
	SET (4 200
	SET (5 200
	SET (6 255
	GDO 1
	
	SET (4 7
	GDO 2
	
	PUSH 0
	PUSH 0
	PUSH killzone
	PUSH 64
	CALL rect
	GDO 3
	GDO 5
	PUSH 100
	CALL waitfor
kanlop:
	CALL ondraw	
	PUSH 100	
	CALL waitfor
	
	SET (4 200
	SET (5 200
	SET (6 255
	GDO 1
	
	SET (4 7
	GDO 2
	
	PUSH 0
	PUSH 0
	PUSH killzone
	PUSH 64
	CALL rect
	GDO 3
	GDO 5
	PUSH 100
	CALL waitfor
	
	
	SET (0 [enl ; получаем икс координату самого первого врага.
	
	SUB (0 killzone
	NEG (0
	NOT (0
	JUMP (0 kanend
	SET (0 *enl
	ADD (0 2
	ADD plscore [(0 ; убитые таким обазом враги всеравно принесут денег в казну, но без коэффециента 1,5
	
	PUSH *enl
	PUSH enl
	CALL lrem
	
	JUMP kanlop
kanend:
	RET

; тут идут процедуры для добавления элемента в список и очистки списка.
ladd: ; добавляет элемент в конец списка. на стеке передают: {указатель на указатель на начало списка, x, hp, pw, spr}. Передается указатель на указатель для того, что бы из процедуры можно было менять первый элемент. Считается, что указатель на конец списка помещен в след ячейке памяти.
	ALLC (0 5 ; создали новый элемент
	PEEK [(0 4 ; задали x
	SET (1 (0
	INC (1
	PEEK [(1 3
	INC (1
	PEEK [(1 2
	INC (1
	PEEK [(1 1
	INC (1
	SET [(1 elist ; поместили в поле next elist
	; возможны два случая - список пуст, или там уже что-то есть. Если пуст, то надо поместить указатель на новый элемент 
	PEEK (2 5 ; указатель на указатель на начало списка
	SET (2 [(2
	NEQL (2 elist
	JUMP (2 laddel
	; тут случай "список пуст"
	PEEK (2 5
	SET [(2 (0
	INC (2
	SET [(2 (0
	RET 5
laddel:
	PEEK (2 5
	INC (2
	SET (1 [(2
	ADD (1 4
	SET [(1 (0 ; поле next текущего последнего элемента теперь ссылается на новый элемент
	SET [(2 (0 ; теперь конец списка указывает на наш новый элемент
	RET 5

	
lclr: ; процедура очищает список. Через стек передается указатель на указатель на первый элемент
	PEEK (0 1
	SET (0 [(0 ; получаем из указателя на указатель обычный указатель
clcrlp:
	SET (1 (0
	EQL (1 elist
	JUMP (1 clcrlpe ; while цикл, пока в регистре (1 не указатель на конец списка
	SET (1 (0 ; запоминаем указатель на след элемент (на случай, если другой процессор после освобождения памяти займет эту же ячейку своими данными)
	ADD (1 4
	FREE (0 ; освобождаем память от текущего элемента списка
	SET (0 [(1 ; поместили в регистр указатель на следующий в списке элемент
	JUMP clcrlp
clcrlpe:
	PEEK (0 1
	SET [(0 elist ; записали в указатель на список значение elist
	INC (0
	SET [(0 elist ; записали в указатель на конец списка значение elist	
	RET 1

lrem: ; процедура удаляет элемент из списка. Через стек передаются указатель на указатель на начало списка и указатель на элемент, который надо удалить.
	PEEK (0 2
	SET (0 [(0 ; получаем из указателя на указатель обычный указатель
	PEEK (1 1
	SET (2 (0
	NEQL (2 (1 ; если начало списка и есть то, что нужно удалить, то удаляем начало списка, меняем указатель на список и возвращаемся. Иначе - ищем элемент в списке
	JUMP (2 lremlp ;
	SET (1 (0
	ADD (1 4
	FREE (0
	PEEK (0 2
	SET [(0 [(1	
	; теперь проверим, что это не было концом списка (если было, надо указатель на конец списка перевести в elist)
	PEEK (0 2
	INC (0
	SET (2 [(0
	PEEK (1 1
	NEQL (2 (1
	JUMP (2 lremlpe
	SET [(0 elist
	RET 2 
lremlp:
	ADD (0 4 ; получили указатель на указатель на следующий элемент
	SET (2 [(0
	EQL (2 elist
	JUMP (2 lremlpe ; если указатель равен значению конца списка, то покидаем цикл
	SET (2 [(0
	NEQL (2 (1 ; если следующий элемент является тем, что надо удалить, то  удаляем его и возвращемся из процедуры
	JUMP (2 lremeif
	SET (2 [(0
	ADD (2 4 ; теперь тут указатель на элемент после следующего
	SET (2 [(2
	FREE [(0
	SET [(0 (2
	; теперь, если в [(0 лежит elist, значит мы удалили конец списка. Это плохо, необходимо перевести указатель на конец списка на текущий элемент
	NEQL (2 elist
	JUMP (2 lremlpe
	SUB (0 4
	PEEK (1 2
	INC (1
	SET [(1 (0
	
	RET 2
lremeif:
	SET (0 [(0 ; получаем указатель на следующий элемент списка
	JUMP lremlp
lremlpe:
	RET 2
	
rect: ; процедура вводит прямоугольник (не вызывая glBegin и glEnd). На стеке координаты левой верхней точки, ширина, высота
	PEEK (4 4
	PEEK (5 3
	GDO 4
	PEEK (1 2
	ADD (4 (1
	GDO 4
	PEEK (1 1
	ADD (5 (1
	GDO 4
	PEEK (1 2
	SUB (4 (1
	GDO 4
	RET 4
	
spr2: ; процелура отрисовки простенького солдата противника. Параметром передается x координата. Параметр передается на стекеэ

	SET (4 7
	GDO 2
	
	; штаны
	SET (4 250
	SET (5 20
	SET (6 15
	SET (7 255
	GDO 1
	
	PEEK (4 1 ; получаем икс координату спрайта	
	ADD (4 3
	PUSH (4
	PUSH 53
	PUSH 2
	PUSH 4
	CALL rect
	; тело
	SET (4 180
	SET (5 2
	SET (6 2
	SET (7 255
	GDO 1
	
	PEEK (4 1 ; получаем икс координату спрайта	
	ADD (4 3
	SET (5 54
	GDO 4
	ADD (4 2
	DEC (5
	GDO 4
	SUB (5 3
	GDO 4
	SUB (4 2
	GDO 4
	; рука
	PEEK (4 1
	INC (4
	PUSH (4
	PUSH 51
	PUSH 3
	PUSH 1
	CALL rect
	; рукоядь меча
	SET (4 84
	SET (5 7
	SET (6 0
	SET (7 255
	GDO 1
	
	PEEK (4 1
	PUSH (4
	PUSH 51
	PUSH 1
	PUSH 2
	CALL rect	
	; клинок
	SET (4 200
	SET (5 200
	SET (6 200
	SET (7 255
	GDO 1
	
	PEEK (4 1
	PUSH (4
	PUSH 48
	PUSH 1
	PUSH 3
	CALL rect
	; шлем
	SET (4 220
	SET (5 220
	SET (6 220
	SET (7 255
	GDO 1
	
	PEEK (4 1
	ADD (4 3
	PUSH (4
	PUSH 48
	PUSH 2
	PUSH 2
	CALL rect
	; лицо
	
	SET (4 127
	SET (5 103
	SET (6 5
	SET (7 255
	GDO 1
	
	PEEK (4 1
	ADD (4 3
	PUSH (4
	PUSH 49
	PUSH 1
	PUSH 1
	CALL rect
	
	GDO 3
	RET 1
	
spr1: ; процедура отрисовки простенького солдата игрока. Параметром передается x координата. Параметр передается на стеке
	
	; штаны
	SET (4 0
	SET (5 171
	SET (6 15
	SET (7 255
	GDO 1
	
	SET (4 7	
	GDO 2
	PEEK (4 1 ; получаем икс координату спрайта
	
	SET (5 57
	GDO 4
	
	ADD (4 2
	GDO 4
	
	SUB (5 4
	GDO 4
	
	SUB (4 2
	GDO 4
	; туловище
	SET (4 118
	SET (5 255
	SET (6 0
	SET (7 255
	GDO 1
	
	PEEK (4 1 ; получаем икс координату спрайта
	SET (5 53
	GDO 4
	
	ADD (4 2
	ADD (5 1
	GDO 4
	
	SUB (5 5
	GDO 4
	
	SUB (4 2
	GDO 4
	
	; голова (волосы)
	SET (4 138
	SET (5 27
	SET (6 0
	SET (7 255
	GDO 1
	
	PEEK (4 1 ; получаем икс координату спрайта
	SET (5 50
	GDO 4
	
	ADD (4 2
	GDO 4
	
	SUB (5 2
	GDO 4
	
	SUB (4 2
	GDO 4
	
	; рукав
	SET (4 0
	SET (5 171
	SET (6 15
	SET (7 255
	GDO 1
	
	PEEK (4 1 ; получаем икс координату спрайта
	SET (5 51	
	ADD (4 1
	
	GDO 4
	ADD (4 3
	GDO 4
	ADD (5 1
	GDO 4
	SUB (4 3
	GDO 4
	; ладонь
	SET (4 180
	SET (5 170
	SET (6 7
	SET (7 255
	GDO 1
	
	PEEK (4 1 ; получаем икс координату спрайта
	SET (5 51	
	ADD (4 3
	
	GDO 4
	ADD (4 1
	GDO 4
	ADD (5 1
	GDO 4
	SUB (4 1
	GDO 4
	; рукоядка меча
	SET (4 84
	SET (5 7
	SET (6 0
	SET (7 255
	GDO 1
	
	PEEK (4 1 ; получаем икс координату спрайта
	SET (5 51	
	ADD (4 4
	
	GDO 4
	ADD (4 1
	GDO 4
	ADD (5 2
	GDO 4
	SUB (4 1
	GDO 4
	; лезвие меча
	SET (4 200
	SET (5 200
	SET (6 200
	SET (7 255
	GDO 1
	
	PEEK (4 1 ; получаем икс координату спрайта
	SET (5 51
	ADD (4 4
	
	GDO 4
	ADD (4 1
	GDO 4
	SUB (5 3
	GDO 4
	SUB (4 1
	GDO 4
	
	GDO 3
	
	SET (4 4 ; лицо является треугольником
	GDO 2
	
	SET (4 255
	SET (5 206
	SET (6 10
	SET (7 255
	GDO 1
	
	PEEK (4 1 ; получаем икс координату спрайта
	
	ADD (4 2
	SET (5 50
	GDO 4
	
	SUB (5 1
	GDO 4
	
	SUB (4 1
	ADD (5 1
	GDO 4
	
	GDO 3
	
	RET 1

ondraw: ; тут будет процедура перерисовки сцены
	SET (4 0
	SET (5 120
	SET (6 200	
	GDO 0 ; очищаем экран голубым цветом
	
	SET (4 10
	SET (5 255
	SET (6 10	
	SET (7 255	
	GDO 1 ; устанавливаем зеленый цвет на кисть
	
	SET (4 7	
	GDO 2 ; начинаем отрисовку квадратов
	
	SET (4 0
	SET (5 55	
	GDO 4 ; ввели одну из вершин прямоугольника
	
	SET (4 128
	SET (5 55	
	GDO 4
	
	SET (4 128
	SET (5 64
	GDO 4
	
	SET (4 0
	SET (5 64	
	GDO 4	
	GDO 3 ; закончили рисовать. Должно получится небо и травка
	
	
	SET (4 128
	SET (5 128
	SET (6 128	
	SET (7 255	
	GDO 1 ; устанавливаем серый цвет на кисть
	
	SET (4 7
	GDO 2 ; начинаем отрисовку квадратов
	
	SET (4 0
	SET (5 64
	GDO 4
	
	SET (4 10
	GDO 4
	
	SET (5 24
	GDO 4
	
	SET (4 0
	GDO 4
	
	GDO 4
	
	SET (4 15
	GDO 4
	
	SET (5 16
	GDO 4
	
	SET (4 0
	GDO 4
	
	SET (4 15
	SET (5 16
	GDO 4
	
	SET (5 13
	GDO 4
	
	SET (4 13
	GDO 4
	
	SET (5 16
	GDO 4
	
	SET (4 9
	GDO 4
	
	SET (5 13
	GDO 4
	
	SET (4 6
	GDO 4
	
	SET (5 16
	GDO 4
	
	SET (4 2
	GDO 4
	
	SET (5 13
	GDO 4
	
	SET (4 0
	GDO 4
	
	SET (5 16
	GDO 4
	
	SET (4 117
	SET (5 64
	GDO 4
	
	SET (4 117
	SET (5 24
	GDO 4
	
	SET (4 128
	SET (5 24
	GDO 4
	
	SET (4 128
	SET (5 64
	GDO 4
	
	SET (4 112
	SET (5 24
	GDO 4
	
	SET (4 128
	SET (5 24
	GDO 4
	
	SET (4 128
	SET (5 16
	GDO 4
	
	SET (4 112
	SET (5 16
	GDO 4
	
	SET (4 112
	SET (5 16
	GDO 4
	
	SET (4 112
	SET (5 13
	GDO 4
	
	SET (4 114
	SET (5 13
	GDO 4
	
	SET (4 114
	SET (5 16
	GDO 4
	
	SET (4 119
	SET (5 16
	GDO 4
	
	SET (4 119
	SET (5 13
	GDO 4
	
	SET (4 121
	SET (5 13
	GDO 4
	
	SET (4 121
	SET (5 16
	GDO 4
	
	SET (4 126
	SET (5 16
	GDO 4
	
	SET (4 126
	SET (5 13
	GDO 4
	
	SET (4 128
	SET (5 13
	GDO 4
	
	SET (4 128
	SET (5 16
	GDO 4
	
	GDO 3 ;закончили ввод фигур. Должен получится левый и правый замки
	
		
	SET (0 pll ; рисуем солдат игрока (пробегаемся по списку)
plp:
	SET (1 (0
	EQL (1 elist
	JUMP (1 plpe ; while цикл, пока в регистре (1 не указатель на конец списка
	PUSH [(0 ; разименовываем. Получаем первы байт, то есть x.
	ADD (0 3 ; теперь тут указатель на процедуру отрисовки
	CALL [(0
	INC (0
	SET (0 [(0 ; поместили в регистр указатель на следующий в списке элемент
	
	JUMP plp
plpe:

	SET (0 enl ; рисуем солдат противника (пробегаемся по списку)
plp2:
	SET (1 (0
	EQL (1 elist
	JUMP (1 plpe2 ; while цикл, пока в регистре (1 не указатель на конец списка
	PUSH [(0 ; разименовываем. Получаем первы байт, то есть x.
	ADD (0 3 ; теперь тут указатель на процедуру отрисовки
	CALL [(0
	INC (0
	SET (0 [(0 ; поместили в регистр указатель на следующий в списке элемент
	
	JUMP plp2
plpe2:

	
	SET (4 7 
	GDO 2 ; рисуем прямоугольник
	
	; здоровье башенки врага
	SET (4 0
	SET (5 0
	SET (6 0
	SET (7 255
	GDO 1 ; ставим кисть в черное
	
	PUSH 100
	PUSH 5
	PUSH 28
	PUSH 3
	CALL rect	
	
	PUSH 0
	PUSH 5
	PUSH 28
	PUSH 3
	CALL rect
	
	SET (0 enhp
	MUL (0 255
	DIV (0 MX_HP
	
	SET (4 255
	SUB (4 (0
	SET (5 (0
	SET (6 0
	SET (7 255
	GDO 1 ; ставим кисть в цвет, который зависит от здоровья врага
	
	SET (0 enhp
	MUL (0 26
	DIV (0 MX_HP
	
	PUSH 101
	PUSH 6
	PUSH (0
	PUSH 1
	CALL rect
	
	SET (0 plhp
	MUL (0 255
	DIV (0 MX_HP
	
	SET (4 255
	SUB (4 (0
	SET (5 (0
	SET (6 0
	SET (7 255
	GDO 1 ; ставим кисть в цвет, который зависит от здоровья игрока
	
	SET (0 plhp
	MUL (0 26
	DIV (0 MX_HP
	
	PUSH 1
	PUSH 6
	PUSH (0
	PUSH 1
	CALL rect
	
	
	SET (4 184
	SET (5 134
	SET (6 11
	SET (7 255
	GDO 1 ; ставим кисть в золотой цвет
	SET (0 plscore
	MUL (0 128
	DIV (0 plscore+1
	PUSH 0
	PUSH 1
	PUSH (0
	PUSH 2		
	CALL rect ; рисуем счет игрока
	
	SET (4 0
	SET (5 200
	SET (6 0
	GDO 1 ; ставим кисть в зеленый цвет
	
	SET (0 killcost
	MUL (0 128
	DIV (0 plscore+1
	PUSH (0
	PUSH 0
	PUSH 2
	PUSH 4
	CALL rect
	
	GDO 3
	
	; остальная логика отрисовки
	
	GDO 5 ; вывели буфер на экран
	
	CLCK prw ; запомнили время обновления экрана
	
	RET
start:  ; точка входа в программу
	SET plscore 10
	SET plscore+1 50
	SET epwr 2
	SET prw 0
	SET enhp MX_HP
	SET plhp MX_HP	
	SET pll elist
	SET enl elist
	
	PUSH *enl
	PUSH 115
	PUSH 3
	PUSH 1
	PUSH spr2
	CALL ladd
loop: 	
	SET (0 enhp
	NEG (0
	JUMP (0 ecs ; если здоровье врага на нуле, то это победа. Выход из цикла
	SET (0 plhp
	NEG (0
	JUMP (0 ecs ; если здоровье игрока на нуле, то это поражение. Выход из цикла
	
	CLCK (0 ; текущее время
	SUB (0 prw ; теперь тут прошедшее время
	SUB (0 100 ;  Если прошло меньше 100 мс, то регистр содержит отрицательное число
	NEG (0 ; проверили
	JUMP (0 keylp ; если прошло меньше 100 мс, то не перересовываем
	
	CLCK (0
	SUB (0 prwe
	SUB (0 3000
	NEG (0
	JUMP (0 cllstrt ; если прошло меньше 3сек с прошлого появления солдата врага, то ждем
	
	PUSH *enl
	PUSH 115
	SET (0 epwr
	MUL (0 3
	PUSH (0
	PUSH epwr
	PUSH spr2
	CALL ladd
	
	CLCK prwe
	
cllstrt:

	SET plnxx 128
	SET (0 pll
	
	SET (1 enl
	EQL (1 elist
	JUMP (1 mnl
	SET plnxx [enl
	
mnl:
	SET (1 (0
	EQL (1 elist
	JUMP (1 mnle ; while цикл, пока в регистре (1 не указатель на конец списка
	SET (2 [(0
	SUB (2 plnxx
	ADD (2 7
	NEG (2
	NOT (2
	JUMP (2 mnince ; если следующий солдат мешает, то шага не будет
	INC [(0 ; разименовываем. Получаем первый байт, то есть x. Увеличиваем координату на 1.
mnince:
	SET plnxx [(0 ; остальные будут равнятся на этого солдата)
	SET (2 [(0 ; получили координаты x
	SUB (2 113
	NEG (2
	JUMP (2 mneif1
	DEC [(0 ; если уперлись в замок, то отменяем инкремент
mneif1:	
	ADD (0 4
	SET (0 [(0 ; поместили в регистр указатель на следующий в списке элемент
	JUMP mnl
mnle:

	SET ennxx 0
	SET (0 enl
	
	SET (1 pll
	EQL (1 elist
	JUMP (1 mnl2
	SET ennxx [pll
	
mnl2:
	SET (1 (0
	EQL (1 elist
	JUMP (1 mnle2 ; while цикл, пока в регистре (1 не указатель на конец списка
	SET (2 [(0
	SUB (2 ennxx
	SUB (2 8
	NEG (2
	JUMP (2 mnince2 ; если следующий солдат мешает, то шага не будет
	DEC [(0 ; разименовываем. Получаем первый байт, то есть x. Уменьшаем координату на 1.
mnince2:
	SET ennxx [(0 ; остальные будут равнятся на этого солдата)
	SET (2 [(0 ; получили координаты x
	SUB (2 9
	JUMP (2 mneif2 ; если уперлись в замок, то отменяем декремент
	INC [(0
mneif2:	
	ADD (0 4
	SET (0 [(0 ; поместили в регистр указатель на следующий в списке элемент
	JUMP mnl2
mnle2:
	CLCK (0
	SUB (0 prwa
	SUB (0 300
	NEG (0
	JUMP (0 cllee ; если прошло меньше 300 мс с прошлого прасчета урона, то урон пока просчитывать рано
	CLCK prwa
	
; проверяем, встретились ли первые солдаты армий. Если так, то они оба отнимают друг у друга здоровье
	SET (0 pll
	EQL (0 elist
	JUMP (0 clle
	SET (0 enl
	EQL (0 elist
	JUMP (0 clle
	SET (0 [enl
	SUB (0 [pll
	SUB (0 8
	NEG (0
	NOT (0
	JUMP (0 clle
	
	SET (0 pll
	SET (1 enl
	
	INC (0
	ADD (1 2
	
	SUB [(0 [(1
	
	INC (0
	DEC (1
	SUB [(1 [(0
	DEC (0
	
	; проверяем HP. если ниже ноля, то уничтожаем солдата
	SET (0 [(0
	NEG (0
	NOT (0
	JUMP (0 cll2
	INC escore
	PUSH *pll
	PUSH pll
	CALL lrem
	
	SET (0 epwr
	MUL (0 20
	SUB (0 escore
	NEG (0
	NOT (0
	JUMP (0 cll2
	INC epwr
	SET escore 0
	
cll2:
	SET (0 [(1
	NEG (0
	NOT (0
	JUMP (0 clle
	SET (0 (1
	INC (0
	SET (2 [(0
	MUL (2 3
	DIV (2 2
	ADD plscore (2 ; увеличиваем счет игрока на размер мощности убитого врага, помноженный на полтора
	PUSH *enl
	PUSH enl
	CALL lrem
	
	SET (0 plscore
	SUB (0 plscore+1
	NEG (0
	JUMP (0 clle
	SET plscore plscore+1 ; если счет игрока больше максимального для текущего уровня, то излишек убираем
	
clle:
	SET (0 pll
	EQL (0 elist
	JUMP (0 cllee1
	SET (0 [pll 
	SUB (0 112
	NEG (0
	JUMP (0 cllee1
	SET (0 pll
	ADD (0 2
	SUB enhp [(0
cllee1:
	SET (0 enl
	EQL (0 elist
	JUMP (0 cllee
	SET (0 [enl
	SUB (0 11
	NEG (0
	NOT (0
	JUMP (0 cllee
	SET (0 enl
	ADD (0 2
	SUB plhp [(0
cllee:
	CALL ondraw
keylp: ; если в буфере клавиатуры собирется много событий, то они обработаются все вместе, до следующей перересовки сцены
	KBD  0 ; если нажата какая-либо клавиша, то она обрабатывается. Иначе, продолжаем цикл
	NOT (3
	JUMP (3 loop 
	KBD  2 ; если нажата esc, то покинуть цикл
	SET (2 (3
	EQL (3 27
	JUMP (3 ecs ; цикл do while. Выход из цикла только при нажатии клавиши esc. 
	SET (3 (2
	NEQL (3 '1' ; если нажать 1, то будет добавлен новый солдат игрока в точку 15
	JUMP (3 kbdK
	
	SET (0 plscore
	SUB (0 u1cost
	NEG (0
	JUMP (0 loop ; счет маловат
	
	SUB plscore u1cost	
	PUSH *pll
	PUSH 12
	PUSH 6
	PUSH 2
	PUSH spr1
	CALL ladd
kbdK:
	SET (3 (2
	NEQL (3 'k' ; если нажать k, то, если достаточно счета, часть врагов умрет под анимацию :)
	JUMP (3 loop
	
	SET (0 plscore
	SUB (0 killcost
	NEG (0
	JUMP (0 loop ; счёта маловато)
	SUB plscore killcost
	CALL kilanim

	JUMP loop
ecs:
	PUSH *pll
	PUSH *enl
	CALL lclr
	CALL lclr
	KBD 2 ; что-то типа "нажмите любую клавишу, что бы продолжить"