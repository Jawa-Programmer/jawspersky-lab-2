#ifndef MATRIX_H
#define MATRIX_H

/// элемент списка. Хранит указатель на следующий элемент, данные и позицию в строке.
struct item {
  item * next;
  int pos;
  int data;
};

/// класс список объектов
class list {
  private:
    /// указатель на начало списка
    item * _start = nullptr;
  /// длинна списка
  int _size;
  public:
  /// конструктор. производит инициализацию
  list(int sz){_size = sz;}
  /// деструктор. Очищает список.
   ~list();
  /// вставить элемент на i позицию
  void insert(int, int);
  /// получить элемент по позиции
  int operator[](const int);
};
/// класс прямоугольной разреженной матрицы
class matrix {
  private:
    /// функция, в которую пользователь может вставить критерий отбора числа.
    bool( * _comparator)(int);
  /// массив списков чисел
  list** _arr;
  /// количество строк и столбцов
  int _m, _n;
  /// строка чисел b.
  int * _b;
  public:
  /// конструктор. производит выделение памяти под матрицу
  matrix(int, int);
  /// деструктор. очищает память
  ~matrix();
  /// выводит на экран матрицу
  void print();
  /// производит вычисление вектора b
  void calculate();
  /// выводит на экран искомый вектор b
  void print_b();
  /// оператор доступа к i строке. Позволителен синтаксис прямой работы с двумерной матрицей a[i][j]; но только для чтения
  list*& operator[](const int);
  /// возвращает количество строк в матрице.
  int rows() {
    return _m;
  }
  /// возвращает количество столбцов в матрице.
  int coulms() {
    return _n;
  }
  /// устанавливает функцию-предикат, отбирающая числа строки для сложения.
  inline void set_comparator(bool( * pred)(int)) {	_comparator = pred;}
};
#endif